{"version":3,"sources":["logo.svg","PathfindingVisualizer/Node/Node.jsx","algorithms/dijkstra.js","algorithms/dfs.js","PathfindingVisualizer/PathfindingVisualizer.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Node","this","props","col","isFinish","isStart","isWall","onMouseDown","onMouseEnter","onMouseUp","row","extraClassName","id","className","Component","dijkstra","grid","startNode","finishNode","visitedNodesInOrder","distance","unvisitedNodes","nodes","node","push","getAllNodes","length","sortNodesByDistance","closestNode","shift","Infinity","isVisited","updateUnvisitedNeighbors","sort","nodeA","nodeB","unvisitedNeighbors","neighbors","filter","neighbor","getUnvisitedNeighbors","previousNode","PathfindingVisualizer","state","algHasRan","algorithm","mouseIsPressed","getInitialGrid","setState","console","log","newGrid","getNewGridWithWallToggled","path","i","setTimeout","animatePath","document","getElementById","nodesInShortestPathOrder","currentNode","unshift","getNodesInShortestPathOrder","animateAlgorithm","pop","dfs","bfs","visualizeDijkstra","visualizeDFS","generateRandWalls","onClick","visualize","generateRand","src","logo","alt","map","rowIdx","key","nodeIdx","handleMouseDown","handleMouseEnter","handleMouseUp","currentRow","createNode","slice","newNode","Math","round","random","App","Helmet","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.59139546.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, {Component} from 'react';\r\n\r\nimport './Node.css';\r\n\r\nexport default class Node extends Component {\r\n  render() {\r\n    const {\r\n      col,\r\n      isFinish,\r\n      isStart,\r\n      isWall,\r\n      onMouseDown,\r\n      onMouseEnter,\r\n      onMouseUp,\r\n      row,\r\n    } = this.props;\r\n    const extraClassName = isFinish\r\n      ? 'node-finish'\r\n      : isStart\r\n      ? 'node-start'\r\n      : isWall\r\n      ? 'node-wall'\r\n      : '';\r\n\r\n    return (\r\n      <div\r\n        id={`node-${row}-${col}`}\r\n        className={`node ${extraClassName}`}\r\n        onMouseDown={() => onMouseDown(row, col)}\r\n        onMouseEnter={() => onMouseEnter(row, col)}\r\n        onMouseUp={() => onMouseUp()}></div>\r\n    );\r\n  }\r\n}","// Performs Dijkstra's algorithm; returns *all* nodes in the order\r\n// in which they were visited. Also makes nodes point back to their\r\n// previous node, effectively allowing us to compute the shortest path\r\n// by backtracking from the finish node.\r\n// import MinHeap from \"./MinHeap\"\r\nexport function dijkstra(grid, startNode, finishNode) {\r\n  const visitedNodesInOrder = [];\r\n  startNode.distance = 0;\r\n  // const unvisitedNodes = new MinHeap();\r\n  // getAllNodes(grid).forEach(element => unvisitedNodes.insert(element))\r\n  // while (!!unvisitedNodes.data.length) {\r\n  //   const closestNode = unvisitedNodes.extractMin();\r\n  const unvisitedNodes = getAllNodes(grid);\r\n  while (!!unvisitedNodes.length) {\r\n    sortNodesByDistance(unvisitedNodes);\r\n    const closestNode = unvisitedNodes.shift();\r\n    // If we encounter a wall, we skip it.\r\n    if (closestNode.isWall) continue;\r\n    // If the closest node is at a distance of infinity,\r\n    // we must be trapped and should therefore stop.\r\n    if (closestNode.distance === Infinity) return visitedNodesInOrder;\r\n    closestNode.isVisited = true;\r\n    visitedNodesInOrder.push(closestNode);\r\n    if (closestNode === finishNode) return visitedNodesInOrder;\r\n    updateUnvisitedNeighbors(closestNode, grid); //unvisitedNodes is updated, but minHeap, not maintained\r\n  }\r\n}\r\n\r\nfunction sortNodesByDistance(unvisitedNodes) {\r\n  unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\r\n}\r\n\r\nfunction updateUnvisitedNeighbors(node, grid) {\r\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\r\n  for (const neighbor of unvisitedNeighbors) {\r\n    neighbor.distance = node.distance + 1;\r\n    neighbor.previousNode = node;\r\n  }\r\n}\r\n\r\nfunction getUnvisitedNeighbors(node, grid) {\r\n  const neighbors = [];\r\n  const { col, row } = node;\r\n  if (row > 0) neighbors.push(grid[row - 1][col]); // up\r\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]); // down\r\n  if (col > 0) neighbors.push(grid[row][col - 1]); // left\r\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]); //right\r\n  return neighbors.filter((neighbor) => !neighbor.isVisited);\r\n}\r\n\r\nfunction getAllNodes(grid) {\r\n  const nodes = [];\r\n  for (const row of grid) {\r\n    for (const node of row) {\r\n      nodes.push(node);\r\n    }\r\n  }\r\n  return nodes;\r\n}\r\n\r\n// Backtracks from the finishNode to find the shortest path.\r\n// Only works when called *after* the dijkstra method above.\r\nexport function getNodesInShortestPathOrder(finishNode) {\r\n  const nodesInShortestPathOrder = [];\r\n  let currentNode = finishNode;\r\n  while (currentNode !== null) {\r\n    nodesInShortestPathOrder.unshift(currentNode);\r\n    currentNode = currentNode.previousNode;\r\n  }\r\n  return nodesInShortestPathOrder;\r\n}\r\n","// Performs Depth First Search; returns *all* nodes in the order\r\n// in which they were visited. Does not return the shortest path,\r\n// but does guarantee a solution (if one exists)\r\n\r\nexport function dfs(grid, startNode, finishNode) {\r\n  const visitedNodesInOrder = [];\r\n  const path = [];\r\n  let node = startNode;\r\n  while (!node.isFinish) {\r\n    const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\r\n    visitedNodesInOrder.push(node);\r\n    node.isVisited = true;\r\n    for (let i = 0; i < unvisitedNeighbors.length; i++) {\r\n      if (node.isWall) {\r\n        continue;\r\n      } else {\r\n        path.push(node);\r\n        node = unvisitedNeighbors[i];\r\n        break;\r\n      }\r\n    }\r\n    if (unvisitedNeighbors.length === 0) {\r\n      if (path.length === 0) {\r\n        break;\r\n      }\r\n      node = path.pop();\r\n    }\r\n  }\r\n  return { visitedNodesInOrder, path };\r\n}\r\n\r\nfunction getUnvisitedNeighbors(node, grid) {\r\n  const neighbors = [];\r\n  const { col, row } = node;\r\n  if (row > 0) neighbors.push(grid[row - 1][col]); // up\r\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]); //right\r\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]); // down\r\n  if (col > 0) neighbors.push(grid[row][col - 1]); // left\r\n  return neighbors.filter(\r\n    (neighbor) => !neighbor.isVisited && !neighbor.isWall\r\n  );\r\n}\r\n","import React, { Component } from \"react\";\r\n// import { NativeSelect } from '@material-ui/core';\r\n// import { InputLabel } from '@material-ui/core';\r\n// import { Button } from '@material-ui/core';\r\nimport logo from \"./../logo.svg\";\r\nimport Node from \"./Node/Node\";\r\nimport { dijkstra, getNodesInShortestPathOrder } from \"../algorithms/dijkstra\";\r\nimport { dfs } from \"../algorithms/dfs\";\r\nimport { bfs } from \"../algorithms/bfs\";\r\nimport \"./PathfindingVisualizer.css\";\r\nimport \"./Buttons.css\";\r\n\r\nconst START_NODE_ROW = 10;\r\nconst START_NODE_COL = 13;\r\nconst FINISH_NODE_ROW = 10;\r\nconst FINISH_NODE_COL = 26;\r\n\r\nexport default class PathfindingVisualizer extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      grid: [],\r\n      algHasRan: false,\r\n      algorithm: \"dijkstra\",\r\n      mouseIsPressed: false,\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    const grid = getInitialGrid();\r\n    this.setState({ grid });\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    console.log(\"Grid Updated\");\r\n  }\r\n\r\n  handleMouseDown(row, col) {\r\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\r\n    this.setState({ grid: newGrid, mouseIsPressed: true });\r\n  }\r\n\r\n  handleMouseEnter(row, col) {\r\n    if (!this.state.mouseIsPressed) return;\r\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\r\n    this.setState({ grid: newGrid });\r\n  }\r\n\r\n  handleMouseUp() {\r\n    this.setState({ mouseIsPressed: false });\r\n  }\r\n\r\n  animateAlgorithm(visitedNodesInOrder, path) {\r\n    for (let i = 1; i <= visitedNodesInOrder.length; i++) {\r\n      if (i === visitedNodesInOrder.length) {\r\n        setTimeout(() => {\r\n          this.animatePath(path);\r\n        }, 10 * i);\r\n        return;\r\n      }\r\n      setTimeout(() => {\r\n        const node = visitedNodesInOrder[i];\r\n        document.getElementById(`node-${node.row}-${node.col}`).className =\r\n          \"node node-visited\";\r\n      }, 10 * i);\r\n    }\r\n  }\r\n\r\n  animatePath(path) {\r\n    for (let i = 1; i < path.length; i++) {\r\n      setTimeout(() => {\r\n        const node = path[i];\r\n        document.getElementById(`node-${node.row}-${node.col}`).className =\r\n          \"node node-shortest-path\";\r\n      }, 50 * i);\r\n    }\r\n  }\r\n\r\n  visualizeDijkstra() {\r\n    console.log(\"Visualize Dijkstra's\");\r\n    const { grid } = this.state;\r\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\r\n    const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\r\n    const visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\r\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\r\n    this.animateAlgorithm(visitedNodesInOrder, nodesInShortestPathOrder);\r\n  }\r\n\r\n  visualizeDFS() {\r\n    console.log(\"Visualize DFS\");\r\n    const { grid } = this.state;\r\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\r\n    const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\r\n    const { visitedNodesInOrder, path } = dfs(grid, startNode, finishNode);\r\n    this.animateAlgorithm(visitedNodesInOrder, path);\r\n  }\r\n\r\n  visualizeBFS() {\r\n    console.log(\"Visualize BFS\");\r\n    const { grid } = this.state;\r\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\r\n    const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\r\n    const { visitedNodesInOrder, path } = bfs(grid, startNode, finishNode);\r\n    this.animateAlgorithm(visitedNodesInOrder, path);\r\n  }\r\n\r\n  visualize() {\r\n    if (this.state.algorithm === \"dijkstra\") {\r\n      this.visualizeDijkstra();\r\n    } else if (this.state.algorithm === \"dfs\") {\r\n      this.visualizeDFS();\r\n    }\r\n    // if (!this.state.algHasRan) {\r\n    //   this.visualizeDijkstra();\r\n    //   this.setState({ algHasRan: true });\r\n    // } else {\r\n    //   //clear the board\r\n    //   const newGrid = clearGrid(this.state.grid);\r\n    //   this.setState({ grid: newGrid, algHasRan: false });\r\n    // }\r\n  }\r\n\r\n  setDFS() {}\r\n\r\n  generateRand() {\r\n    const newGrid = generateRandWalls(this.state.grid);\r\n    this.setState({ grid: newGrid, mouseIsPressed: true });\r\n  }\r\n\r\n  render() {\r\n    const { grid, mouseIsPressed } = this.state;\r\n\r\n    return (\r\n      <>\r\n        <div className=\"box-1\">\r\n          {/* <InputLabel htmlFor=\"select\">Algorithm</InputLabel>\r\n          <NativeSelect id=\"select\">\r\n            <option value=\"dijkstra\">Dijkstra's</option>\r\n            <option value=\"dfs\">DFS</option>\r\n          </NativeSelect>\r\n          <div class=\"btn btn-one btn-one\">\r\n            <span>Dijkstra's Algorithm</span>\r\n          </div> */}\r\n          <div\r\n            className=\"btn btn-one\"\r\n            onClick={() => this.setState({ algorithm: \"dfs\" })}\r\n          >\r\n            <span>DFS</span>\r\n          </div>\r\n          <div\r\n            className=\"btn btn-one\"\r\n            onClick={() => this.setState({ algorithm: \"dijkstra\" })}\r\n          >\r\n            <span>Dikjstra's Algorithm</span>\r\n          </div>\r\n          <div className=\"btn btn-two\" onClick={() => this.visualize()}>\r\n            <span>Start</span>\r\n          </div>\r\n          <div className=\"btn btn-one\" onClick={() => this.generateRand()}>\r\n            <span>Generate Maze</span>\r\n          </div>\r\n\r\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n        </div>\r\n        <div className=\"instructions\">\r\n          <span>Pick an algorithm and hit Start!</span>\r\n        </div>\r\n        <div className=\"grid\">\r\n          {grid.map((row, rowIdx) => {\r\n            return (\r\n              <div key={rowIdx}>\r\n                {row.map((node, nodeIdx) => {\r\n                  const { row, col, isFinish, isStart, isWall } = node;\r\n                  return (\r\n                    <Node\r\n                      key={nodeIdx}\r\n                      col={col}\r\n                      isFinish={isFinish}\r\n                      isStart={isStart}\r\n                      isWall={isWall}\r\n                      mouseIsPressed={mouseIsPressed}\r\n                      onMouseDown={(row, col) => this.handleMouseDown(row, col)}\r\n                      onMouseEnter={(row, col) =>\r\n                        this.handleMouseEnter(row, col)\r\n                      }\r\n                      onMouseUp={() => this.handleMouseUp()}\r\n                      row={row}\r\n                    ></Node>\r\n                  );\r\n                })}\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\nconst getInitialGrid = () => {\r\n  const grid = [];\r\n  for (let row = 0; row < 20; row++) {\r\n    const currentRow = [];\r\n    for (let col = 0; col < 40; col++) {\r\n      currentRow.push(createNode(col, row));\r\n    }\r\n    grid.push(currentRow);\r\n  }\r\n  return grid;\r\n};\r\nconst createNode = (col, row) => {\r\n  return {\r\n    col,\r\n    row,\r\n    isStart: row === START_NODE_ROW && col === START_NODE_COL,\r\n    isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\r\n    distance: Infinity,\r\n    isVisited: false,\r\n    isWall: false,\r\n    previousNode: null,\r\n  };\r\n};\r\nconst getNewGridWithWallToggled = (grid, row, col) => {\r\n  const newGrid = grid.slice();\r\n  const node = newGrid[row][col];\r\n  const newNode = {\r\n    ...node,\r\n    isWall: !node.isWall,\r\n  };\r\n  newGrid[row][col] = newNode;\r\n  return newGrid;\r\n};\r\nconst generateRandWalls = (grid) => {\r\n  const newGrid = grid.slice();\r\n  for (let row = 0; row < newGrid.length; row++) {\r\n    for (let col = 0; col < newGrid[0].length; col++) {\r\n      const makeWall = Math.round(Math.random() * 0.7);\r\n      if (makeWall) {\r\n        const node = newGrid[row][col];\r\n        const newNode = {\r\n          ...node,\r\n          isWall: !node.isWall,\r\n        };\r\n        newGrid[row][col] = newNode;\r\n      }\r\n    }\r\n  }\r\n  return newGrid;\r\n};\r\nconst clearGrid = (grid) => {\r\n  //complete this\r\n  const newGrid = grid.slice();\r\n  //remove walls\r\n\r\n  //make grid white\r\n\r\n  return newGrid;\r\n};\r\n","import React from \"react\";\nimport { Helmet } from \"react-helmet\";\nimport \"./App.css\";\nimport PathfindingVisualizer from \"./PathfindingVisualizer/PathfindingVisualizer\";\n\nconst TITLE = \"Josh's Pathfinder\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Helmet>\n        <title>{TITLE}</title>\n      </Helmet>\n      <PathfindingVisualizer></PathfindingVisualizer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}